syntax = "v1"

info (
	title:   "Chat RAG API"
	desc:    "OpenAI compatible chat completions API with RAG compression"
	author:  "chat-rag"
	version: "v1.0"
)

type (
	// OpenAI compatible message structure
	Message {
		Role    string `json:"role"`
		Content string `json:"content"`
	}
	// custom chat completion request
	ChatCompletionRequest {
		Model         string        `json:"model"`
		Messages      []Message     `json:"messages"`
		Stream        bool          `json:"stream,optional"`
		Temperature   float64       `json:"temperature,optional"`
		ClientId      string        `json:"client_id,optional"`
		ProjectPath   string        `json:"project_path,optional"`
		StreamOptions StreamOptions `json:"stream_options,optional"`
	}
	// OpenAI compatible message structure
	ChatLLMRequest {
		Model       string    `json:"model"`
		Messages    []Message `json:"messages"`
		Temperature float64   `json:"temperature,optional"`
	}
	// OpenAI compatible message structure
	ChatLLMRequestStream {
		Model         string        `json:"model"`
		Messages      []Message     `json:"messages"`
		Stream        bool          `json:"stream,optional"`
		Temperature   float64       `json:"temperature,optional"`
		StreamOptions StreamOptions `json:"stream_options,optional"`
	}
	// OpenAI compatible choice structure
	Choice {
		Index        int     `json:"index"`
		Message      Message `json:"message,optional"`
		Delta        Message `json:"delta,optional"`
		FinishReason string  `json:"finish_reason,optional"`
	}
	// OpenAI compatible usage structure
	Usage {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
	}
	StreamOptions {
		IncludeUsage bool `json:"include_usage"`
	}
	// OpenAI compatible chat completion response
	ChatCompletionResponse {
		Id      string   `json:"id"`
		Object  string   `json:"object"`
		Created int64    `json:"created"`
		Model   string   `json:"model"`
		Choices []Choice `json:"choices"`
		Usage   Usage    `json:"usage,optional"`
	}
)

service chat-api {
	@handler ChatCompletionHandler
	post /v1/chat/completions (ChatCompletionRequest) returns (ChatCompletionResponse)
}

