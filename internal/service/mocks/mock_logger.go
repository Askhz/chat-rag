// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\service\logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/zgsm-ai/chat-rag/internal/model"
	service "github.com/zgsm-ai/chat-rag/internal/service"
)

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// LogAsync mocks base method.
func (m *MockLoggerInterface) LogAsync(logs *model.ChatLog, headers *http.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogAsync", logs, headers)
}

// LogAsync indicates an expected call of LogAsync.
func (mr *MockLoggerInterfaceMockRecorder) LogAsync(logs, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogAsync", reflect.TypeOf((*MockLoggerInterface)(nil).LogAsync), logs, headers)
}

// SetMetricsService mocks base method.
func (m *MockLoggerInterface) SetMetricsService(metricsService service.MetricsInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetricsService", metricsService)
}

// SetMetricsService indicates an expected call of SetMetricsService.
func (mr *MockLoggerInterfaceMockRecorder) SetMetricsService(metricsService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsService", reflect.TypeOf((*MockLoggerInterface)(nil).SetMetricsService), metricsService)
}

// Start mocks base method.
func (m *MockLoggerInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLoggerInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLoggerInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockLoggerInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockLoggerInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLoggerInterface)(nil).Stop))
}
