// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\service\metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	model "github.com/zgsm-ai/chat-rag/internal/model"
)

// MockMetricsInterface is a mock of MetricsInterface interface.
type MockMetricsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsInterfaceMockRecorder
}

// MockMetricsInterfaceMockRecorder is the mock recorder for MockMetricsInterface.
type MockMetricsInterfaceMockRecorder struct {
	mock *MockMetricsInterface
}

// NewMockMetricsInterface creates a new mock instance.
func NewMockMetricsInterface(ctrl *gomock.Controller) *MockMetricsInterface {
	mock := &MockMetricsInterface{ctrl: ctrl}
	mock.recorder = &MockMetricsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsInterface) EXPECT() *MockMetricsInterfaceMockRecorder {
	return m.recorder
}

// GetRegistry mocks base method.
func (m *MockMetricsInterface) GetRegistry() *prometheus.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry")
	ret0, _ := ret[0].(*prometheus.Registry)
	return ret0
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockMetricsInterfaceMockRecorder) GetRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockMetricsInterface)(nil).GetRegistry))
}

// RecordChatLog mocks base method.
func (m *MockMetricsInterface) RecordChatLog(log *model.ChatLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordChatLog", log)
}

// RecordChatLog indicates an expected call of RecordChatLog.
func (mr *MockMetricsInterfaceMockRecorder) RecordChatLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordChatLog", reflect.TypeOf((*MockMetricsInterface)(nil).RecordChatLog), log)
}
