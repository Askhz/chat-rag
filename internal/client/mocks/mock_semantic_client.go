// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/semantic.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/zgsm-ai/chat-rag/internal/client"
)

// MockSemanticInterface is a mock of SemanticInterface interface.
type MockSemanticInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSemanticInterfaceMockRecorder
}

// MockSemanticInterfaceMockRecorder is the mock recorder for MockSemanticInterface.
type MockSemanticInterfaceMockRecorder struct {
	mock *MockSemanticInterface
}

// NewMockSemanticInterface creates a new mock instance.
func NewMockSemanticInterface(ctrl *gomock.Controller) *MockSemanticInterface {
	mock := &MockSemanticInterface{ctrl: ctrl}
	mock.recorder = &MockSemanticInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemanticInterface) EXPECT() *MockSemanticInterfaceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSemanticInterface) Search(ctx context.Context, req client.SemanticRequest) (*client.SemanticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, req)
	ret0, _ := ret[0].(*client.SemanticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSemanticInterfaceMockRecorder) Search(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSemanticInterface)(nil).Search), ctx, req)
}
