// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/llm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/zgsm-ai/chat-rag/internal/types"
)

// MockLLMClientInterface is a mock of LLMClientInterface interface.
type MockLLMClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLLMClientInterfaceMockRecorder
}

// MockLLMClientInterfaceMockRecorder is the mock recorder for MockLLMClientInterface.
type MockLLMClientInterfaceMockRecorder struct {
	mock *MockLLMClientInterface
}

// NewMockLLMClientInterface creates a new mock instance.
func NewMockLLMClientInterface(ctrl *gomock.Controller) *MockLLMClientInterface {
	mock := &MockLLMClientInterface{ctrl: ctrl}
	mock.recorder = &MockLLMClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMClientInterface) EXPECT() *MockLLMClientInterfaceMockRecorder {
	return m.recorder
}

// ChatLLMWithMessagesRaw mocks base method.
func (m *MockLLMClientInterface) ChatLLMWithMessagesRaw(ctx context.Context, messages []types.Message) (types.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatLLMWithMessagesRaw", ctx, messages)
	ret0, _ := ret[0].(types.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatLLMWithMessagesRaw indicates an expected call of ChatLLMWithMessagesRaw.
func (mr *MockLLMClientInterfaceMockRecorder) ChatLLMWithMessagesRaw(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatLLMWithMessagesRaw", reflect.TypeOf((*MockLLMClientInterface)(nil).ChatLLMWithMessagesRaw), ctx, messages)
}

// ChatLLMWithMessagesStreamRaw mocks base method.
func (m *MockLLMClientInterface) ChatLLMWithMessagesStreamRaw(ctx context.Context, messages []types.Message, callback func(string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatLLMWithMessagesStreamRaw", ctx, messages, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatLLMWithMessagesStreamRaw indicates an expected call of ChatLLMWithMessagesStreamRaw.
func (mr *MockLLMClientInterfaceMockRecorder) ChatLLMWithMessagesStreamRaw(ctx, messages, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatLLMWithMessagesStreamRaw", reflect.TypeOf((*MockLLMClientInterface)(nil).ChatLLMWithMessagesStreamRaw), ctx, messages, callback)
}

// GenerateContent mocks base method.
func (m *MockLLMClientInterface) GenerateContent(ctx context.Context, systemPrompt string, userMessages []types.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateContent", ctx, systemPrompt, userMessages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateContent indicates an expected call of GenerateContent.
func (mr *MockLLMClientInterfaceMockRecorder) GenerateContent(ctx, systemPrompt, userMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContent", reflect.TypeOf((*MockLLMClientInterface)(nil).GenerateContent), ctx, systemPrompt, userMessages)
}

// GetModelName mocks base method.
func (m *MockLLMClientInterface) GetModelName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModelName indicates an expected call of GetModelName.
func (mr *MockLLMClientInterfaceMockRecorder) GetModelName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelName", reflect.TypeOf((*MockLLMClientInterface)(nil).GetModelName))
}
