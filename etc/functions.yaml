tools:
  # server tools
  - name: "codebase_search"
    type: "server"
    description: |
      Find snippets of code from the codebase most relevant to the search query.
      This is a semantic search tool, so the query should ask for something semantically matching what is needed.
      If it makes sense to only search in particular directories, please specify them in the target_directories field.
      Unless there is a clear reason to use your own search query, please just reuse the user's exact query with their wording.
      Their exact wording/phrasing can often be helpful for the semantic search query. Keeping the same exact question format can also be helpful.
    
    endpoint: "/codebase-indexer/api/v1/search/semantic"
    method: "GET"
    
    auth:
      type: "bearer"
      location: "header"
    
    parameters:
      - name: "query"
        type: "string"
        description: "The search query to find relevant code. You should reuse the user's exact query/most recent message with their wording unless there is a clear reason not to."
        required: true
        in: "query"  # parameters position in the request(query/path/header)
      
      - name: "target_directories"
        type: "array"
        description: "Glob patterns for directories to search over"
        items:
          type: "string"
        in: "query"
      
      - name: "explanation"
        type: "string"
        description: "One sentence explanation as to why this tool is being used, and how it contributes to the goal."
        in: "query"
      
      - name: "topK"
        type: "integer"
        description: "Number of results to return (default 10)"
        default: 10
        in: "query"
      
      - name: "clientId"
        type: "string"
        description: "User machine identifier (e.g. MAC address)"
        required: true
        in: "query"
      
      - name: "codebasePath"
        type: "string"
        description: "Absolute path to the codebase"
        required: true
        in: "query"

  # IDE tools
  - name: "read_file"
    type: "ide"
    description: |
      Request to read the contents of a file at the specified path. 
      Use this when you need to examine the contents of an existing file you do not know the contents of, for example to analyze code, review text files, or extract information from configuration files. 
      The output includes line numbers prefixed to each line (e.g. "1 | const x = 1"), making it easier to reference specific lines when creating diffs or discussing code. 
      By specifying start_line and end_line parameters, you can efficiently read specific portions of large files without loading the entire file into memory. 
      Automatically extracts raw text from PDF and DOCX files. May not be suitable for other types of binary files, as it returns the raw content as a string.
      
      Examples:

      1. Reading an entire file:
      {
        "path": "frontend-config.json"
      }

      2. Reading the first 1000 lines of a large log file:
      {
        "path": "logs/application.log",
        "end_line": 1000
      }

      3. Reading lines 500-1000 of a CSV file:
      {
        "path": "data/large-dataset.csv",
        "start_line": 500,
        "end_line": 1000
      }

      4. Reading a specific function in a source file:
      {
        "path": "src/app.ts",
        "start_line": 46,
        "end_line": 68
      }

      Note: When both start_line and end_line are provided, this tool efficiently streams only the requested lines, making it suitable for processing large files like logs, CSV files, and other large datasets without memory issues.
    parameters:
      - name: "path"
        type: "string"
        description: "The path of the file to read (relative to the current workspace directory c:\\Projects\\JustGains-Admin)"
        required: true
      - name: "start_line"
        type: "integer"
        description: "The starting line number to read from (1-based). If not provided, it starts from the beginning of the file."
        required: false
      - name: "end_line"
        type: "integer"
        description: "The ending line number to read to (1-based, inclusive). If not provided, it reads to the end of the file."
        required: false

  - name: "fetch_instructions"
    type: "ide"
    description: |
      Request to fetch instructions to perform a task

      Example: Requesting instructions to create an MCP Server
      {
        "task": "create_mcp_server"
      }

    parameters:
      - name: "task"
        type: "string"
        description: "The task to get instructions for. This can take the following values: create_mcp_server, create_mode"
        required: true
        enum:
          - "create_mcp_server"
          - "create_mode"

  - name: "search_files"
    type: "ide"
    description: |
      Request to perform a regex search across files in a specified directory, providing context-rich results.
      This tool searches for patterns or specific content across multiple files, displaying each match with encapsulating context.
      
      Examples: Searching for all .ts files in the current directory:
      {
        "path": ".",
        "regex": ".*",
        "file_pattern": "*.ts"
      }

    parameters:
      - name: "path"
        type: "string"
        description: "The path of the directory to search in (relative to the current workspace directory)"
        required: true
      - name: "regex"
        type: "string"
        description: "The regular expression pattern to search for. Uses Rust regex syntax."
        required: true
      - name: "file_pattern"
        type: "string"
        description: "Glob pattern to filter files (e.g., '*.ts' for TypeScript files). If not provided, it will search all files (*)."
        required: false

  - name: "list_files"
    type: "ide"
    description: |
      Request to list files and directories within the specified directory.
      If recursive is true, lists all files and directories recursively.
      Do not use this tool to confirm file creation - user will provide feedback.

      Examples: Requesting to list all files in the current directory:
      {
        "path": ".",
        "recursive": false
      }

    parameters:
      - name: "path"
        type: "string"
        description: "The path of the directory to list (relative to current workspace directory)"
        required: true
      
      - name: "recursive"
        type: "boolean"
        description: "Whether to list files recursively. Use true for recursive listing, false or omit for top-level only."
        default: false

  - name: "list_code_definition_names"
    type: "ide"
    description: |
      Request to list definition names (classes, functions, methods, etc.) from source code. 
      This tool can analyze either a single file or all files at the top level of a specified directory. 
      It provides insights into the codebase structure and important constructs, 
      encapsulating high-level concepts and relationships that are crucial for understanding the overall architecture.

      Examples:

      1. List definitions from a specific file:
      {
        "path": "src/main.ts"
      }

      2. List definitions from all files in a directory:
      {
        "path": "src/"
      }
    parameters:
      - name: "path"
        type: "string"
        description: "The path of the file or directory (relative to the current working directory) to analyze. When given a directory, it lists definitions from all top-level source files."
        required: true

  - name: "apply_diff"
    type: "ide"
    description: |
      Request to replace existing code using a search and replace block.
      This tool allows for precise, surgical replaces to files by specifying exactly what content to search for and what to replace it with.
      The tool will maintain proper indentation and formatting while making changes.
      Only a single operation is allowed per tool use.
      The SEARCH section must exactly match existing content including whitespace and indentation.
      If you're not confident in the exact content to search for, use the read_file tool first to get the exact content.
      When applying the diffs, be extra careful to remember to change any closing brackets or other syntax that may be affected by the diff farther down in the file.
      ALWAYS make as many changes in a single 'apply_diff' request as possible using multiple SEARCH/REPLACE blocks

      Example:

      Search/Replace content:
      ```
      <<<<<<< SEARCH
      :start_line:1
      -------
      def calculate_total(items):
          total = 0
          for item in items:
              total += item
          return total
      =======
      def calculate_total(items):
          """Calculate total with 10% markup"""
          return sum(item * 1.1 for item in items)
      >>>>>>> REPLACE

      ```

      Search/Replace content with multi edits:
      ```
      <<<<<<< SEARCH
      :start_line:1
      -------
      def calculate_total(items):
          sum = 0
      =======
      def calculate_sum(items):
          sum = 0
      >>>>>>> REPLACE

      <<<<<<< SEARCH
      :start_line:4
      -------
              total += item
          return total
      =======
              sum += item
          return sum 
      >>>>>>> REPLACE
      ```
    parameters:
      - name: "path"
        type: "string"
        description: "The path of the file to modify (relative to the current workspace directory)"
        required: true
      - name: "diff"
        type: "string"
        description: |
          The search/replace block defining the changes.
          Format:
          ```
          <<<<<<< SEARCH
          :start_line: (required) The line number of original content where the search block starts.
          :end_line: (required) The line number of original content where the search block ends.
          -------
          [exact content to find including whitespace]
          =======
          [new content to replace with]
          >>>>>>> REPLACE
          ```
        required: true

  - name: "write_to_file"
    type: "ide"
    description: |
      Request to write full content to a file at the specified path. 
      If the file exists, it will be overwritten with the provided content. 
      If the file doesn't exist, it will be created. 
      This tool will automatically create any directories needed to write the file.

      Example: Requesting to write to frontend-config.json
      {
        "path": "frontend-config.json",
        "content": "{\"apiEndpoint\":\"https://api.example.com\",\"theme\":{\"primaryColor\":\"#007bff\",\"secondaryColor\":\"#6c757d\",\"fontFamily\":\"Arial, sans-serif\"},\"features\":{\"darkMode\":true,\"notifications\":true,\"analytics\":false},\"version\":\"1.0.0\"}",
        "line_count": 14
      }
    parameters:
      - name: "path"
        type: "string"
        description: "The path of the file to write to (relative to the current workspace directory)"
        required: true
      - name: "content"
        type: "string"
        description: "The content to write to the file. ALWAYS provide the COMPLETE intended content of the file, without any truncation or omissions. You MUST include ALL parts of the file, even if they haven't been modified. Do NOT include the line numbers in the content though, just the actual content of the file."
        required: true
      - name: "line_count"
        type: "integer"
        description: "The number of lines in the file. Make sure to compute this based on the actual content of the file, not the number of lines in the content you're providing."
        required: true

  - name: "search_and_replace"
    type: "ide"
    description: |
      Use this tool to find and replace specific text strings or patterns (using regex) within a file. 
      It's suitable for targeted replacements across multiple locations within the file. 
      Supports literal text and regex patterns, case sensitivity options, and optional line ranges. 
      Shows a diff preview before applying changes.

      Notes:
      - When use_regex is true, the search parameter is treated as a regular expression pattern
      - When ignore_case is true, the search is case-insensitive regardless of regex mode

      Examples:

      1. Simple text replacement:
      {
        "path": "example.ts",
        "search": "oldText",
        "replace": "newText"
      }

      2. Case-insensitive regex pattern:
      {
        "path": "example.ts",
        "search": "old\\w+",
        "replace": "new$&",
        "use_regex": true,
        "ignore_case": true
      }
    parameters:
      - name: "path"
        type: "string"
        description: "The path of the file to modify (relative to the current workspace directory)"
        required: true
      - name: "search"
        type: "string"
        description: "The text or pattern to search for"
        required: true
      - name: "replace"
        type: "string"
        description: "The text to replace matches with"
        required: true
      - name: "start_line"
        type: "integer"
        description: "Starting line number for restricted replacement (1-based)"
        required: false
      - name: "end_line"
        type: "integer"
        description: "Ending line number for restricted replacement (1-based)"
        required: false
      - name: "use_regex"
        type: "boolean"
        description: "Set to \"true\" to treat search as a regex pattern (default: false)"
        required: false
        default: false
      - name: "ignore_case"
        type: "boolean"
        description: "Set to \"true\" to ignore case when matching (default: false)"
        required: false
        default: false

  - name: "execute_command"
    type: "ide"
    description: |
      Request to execute a CLI command on the system. 
      Use this when you need to perform system operations or run specific commands to accomplish any step in the user's task. 
      You must tailor your command to the user's system and provide a clear explanation of what the command does.

      Examples:

      1. Requesting to execute npm run dev:
      {
        "command": "npm run dev"
      }

      2. Requesting to execute ls in a specific directory if directed:
      {
        "command": "ls -la",
        "cwd": "/home/user/projects"
      }
    parameters:
      - name: "command"
        type: "string"
        description: "The CLI command to execute. This should be valid for the current operating system."
        required: true
      - name: "cwd"
        type: "string"
        description: "The working directory to execute the command in (default: relative to the current workspace directory)"
        required: false

  - name: "use_mcp_tool"
    type: "ide"
    description: |
      Request to use a tool provided by a connected MCP server. 
      Each MCP server can provide multiple tools with different capabilities. 
      Tools have defined input schemas that specify required and optional parameters.

      Example: Requesting to use an MCP tool
      {
        "server_name": "weather-server",
        "tool_name": "get_forecast",
        "arguments": "{\"city\":\"San Francisco\",\"days\":5}"
      }
    parameters:
      - name: "server_name"
        type: "string"
        description: "The name of the MCP server providing the tool"
        required: true
      - name: "tool_name"
        type: "string"
        description: "The name of the tool to execute"
        required: true
      - name: "arguments"
        type: "object"
        description: "A JSON object containing the tool's input parameters, following the tool's input schema"
        required: true

  - name: "access_mcp_resource"
    type: "ide"
    description: |
      Request to access a resource provided by a connected MCP server. 
      Resources represent data sources that can be used as context, such as files, API responses, or system information.

      Example: Requesting to access an MCP resource
      {
        "server_name": "weather-server",
        "uri": "weather://san-francisco/current"
      }
    parameters:
      - name: "server_name"
        type: "string"
        description: "The name of the MCP server providing the resource"
        required: true
      - name: "uri"
        type: "string"
        description: "The URI identifying the specific resource to access"
        required: true

  - name: "ask_followup_question"
    type: "ide"
    description: |
      Ask the user a question to gather additional information needed to complete the task. This tool should be used when you encounter ambiguities, need clarification, or require more details to proceed effectively. It allows for interactive problem-solving by enabling direct communication with the user. Use this tool judiciously to maintain a balance between gathering necessary information and avoiding excessive back-and-forth.

      Example: Requesting to ask the user for the path to the frontend-config.json file
      {
        "question": "What is the path to the frontend-config.json file?",
        "follow_up": [
          "./src/frontend-config.json",
          "./config/frontend-config.json", 
          "./frontend-config.json"
        ]
      }
    parameters:
      - name: "question"
        type: "string"
        description: |
          The question to ask the user. This should be:
          1. A clear, specific question that addresses the information you need
          2. Formulated to get a definitive answer
          3. Focused on a single piece of missing information
        required: true
      - name: "follow_up"
        type: "array"
        description: |
          A list of 2-4 suggested answers that:
          1. Logically follow from the question
          2. Are ordered by priority or logical sequence
          3. Each suggestion must be:
            - Specific and actionable
            - Directly related to the completed task
            - A complete answer (no placeholders or missing info)
        items:
          type: "string"
        minItems: 2
        maxItems: 4
        required: true

  - name: "attempt_completion"
    type: "ide"
    description: |
      After each tool use, the user will respond with the result of that tool use, i.e. if it succeeded or failed, along with any reasons for failure. 
      Once you've received the results of tool uses and can confirm that the task is complete, use this tool to present the result of your work to the user. 
      Optionally you may provide a CLI command to showcase the result of your work. 
      The user may respond with feedback if they are not satisfied with the result, which you can use to make improvements and try again.

      IMPORTANT NOTE: This tool CANNOT be used until you've confirmed from the user that any previous tool uses were successful. 
      Failure to do so will result in code corruption and system failure. 
      Before using this tool, you must ask yourself in <thinking></thinking> tags if you've confirmed from the user that any previous tool uses were successful. 
      If not, then DO NOT use this tool.

      Example: Requesting to attempt completion with a result and command
      {
        "result": "I've updated the CSS",
        "command": "open index.html"
      }
    parameters:
      - name: "result"
        type: "string"
        description: "The result of the task. Formulate this result in a way that is final and does not require further input from the user."
        required: true
      - name: "command"
        type: "string"
        description: |
          A CLI command to execute to show a live demo of the result to the user. 
          For example, use \`open index.html\` to display a created html website, or \`open localhost:3000\` to display a locally running development server. 
          But DO NOT use commands like \`echo\` or \`cat\` that merely print text. 
          This command should be valid for the current operating system. 
          Ensure the command is properly formatted and does not contain any harmful instructions.
        required: false

  - name: "switch_mode"
    type: "ide"
    description: |
      Request to switch to a different mode. 
      This tool allows modes to request switching to another mode when needed, such as switching to Code mode to make code changes. 
      The user must approve the mode switch.

      Example: Requesting to switch to code mode
      {
        "mode_slug": "code",
        "reason": "Need to make code changes"
      }
    parameters:
      - name: "mode_slug"
        type: "string"
        description: "The slug of the mode to switch to (e.g., 'code', 'ask', 'architect')"
        required: true
      - name: "reason"
        type: "string"
        description: "The reason for switching modes"
        required: false

  - name: "new_task"
    type: "ide"
    description: |
      This will let you create a new task instance in the chosen mode using your provided message.

      Example:
      {
        "mode": "code",``
        "message": "Implement a new feature for the application."
      }
    parameters:
      - name: "mode"
        type: "string"
        description: "The slug of the mode to start the new task in (e.g., 'code', 'debug', 'architect')"
        required: true
      - name: "message"
        type: "string"
        description: "The initial user message or instructions for this new task"
        required: true